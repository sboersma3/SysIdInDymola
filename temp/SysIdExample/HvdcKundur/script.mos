Model       = "HvdcKundur";

working_dir = "C:/Users/s.boersma/Desktop/SysIdExample/"+Model+"/working_dir";
cd(working_dir)

Modelica.Utilities.Files.remove("results")
Modelica.Utilities.Files.createDirectory("results");

ModelToSimulate     = Model+".NetworkSimu";
ModelToLinearize    = Model+".NetworkSysId";


sigma_u             = .0;           // standard deviation noise input  
sigma_y             = .0;            // standard deviation noise output  
sigma_load          = .0;             // standard deviation noise load
  

LinRes              = "LinRes";
SimRes              = "SimRes";
parameters          = "parameters";


// set #excitation frequencies in .mo file
//Modelica.Utilities.Files.copy("Multisine_Noise_SimuInit.mo", "../ExcitationGeneration/Multisine_Noise_Simu.mo", replace = true);  
//Modelica.Utilities.Files.remove("Mvalue.txt");
//Modelica.Utilities.Streams.print(String(M),"Mvalue.txt");
//Modelica.Utilities.Files.remove("Lvalue.txt");
//Modelica.Utilities.Streams.print(String(L),"Lvalue.txt");
//Modelica.Utilities.Files.remove("hvalue.txt");
//Modelica.Utilities.Streams.print(String(h),"hvalue.txt");
//Modelica.Utilities.Files.remove("llvalue.txt");
//Modelica.Utilities.Streams.print(String(ll),"llvalue.txt");
//Execute("..\SetValues.bat")

A = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ; 
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];



M  = 20;
L  = 2;
h  = 0.01;
ll = 60;


openModel("..\Groups\package.mo",mustRead=false);
//openModel("..\ExcitationGeneration\Multisine_Noise_Simu.mo");
openModel("..\..\bin\OpenIPSL\package.mo",mustRead=false);
openModel("..\LPV\package.mo",mustRead=false);
openModel("..\HVDCcomponents\package.mo",mustRead=false);
cd(working_dir)

Advanced.GenerateAnalyticJacobian = false;

// set settings for linearization
Advanced.Define.DAEsolver = false;  

translateModel(ModelToLinearize)
 
// loop for linearization
for kk in 1:N loop
   
  //pwLine2.t1 = ll*d1;
  //pwLine2.t2 = ll*d2; 
        
  LPV.linearize(ModelToLinearize, ModelToSimulate, timeStep=ll*kk, samplePeriod=h, Nlin=ll, counter=kk, fileNameLin="results/"+LinRes, fileNameSim="results"+SimRes  );  
     
end for;  
 
// set settings for time domain simulation
experimentSetupOutput(states=false,derivatives=false,auxiliaries=false,events=false);
Advanced.Define.DAEsolver = false;
translateModel(ModelToSimulate);

// set excitation parameters in the model
multisine_Noise_Simu.normalNoise_P.samplePeriod = h;             
multisine_Noise_Simu.normalNoise_P.sigma        = sigma_u;           
multisine_Noise_Simu.normalNoise_Q.samplePeriod = h;             
multisine_Noise_Simu.normalNoise_Q.sigma        = sigma_u; 

multisine_Noise_Simu.generateMultiSine_P.A      = A;
multisine_Noise_Simu.generateMultiSine_P.B      = B;
multisine_Noise_Simu.generateMultiSine_P.C      = C;
 
multisine_Noise_Simu_load.normalNoise_P.samplePeriod = h;
multisine_Noise_Simu_load.normalNoise_P.sigma        = sigma_load;
multisine_Noise_Simu_load.normalNoise_Q.samplePeriod = h;
multisine_Noise_Simu_load.normalNoise_Q.sigma        = 0*sigma_load;

// loop for time domain simulation
for kk in 1:N loop
  
  //pwLine2.t1 = ll*d1;
  //pwLine2.t2 = ll*d2;
  
  LPV.simulateExtendedModel(ModelToSimulate, startTime=ll*(kk-1), stopTime=ll*kk, outputInterval=h, method="Radau IIa", resultFile="results/"+SimRes+String(ll*kk) ); 
  importInitial("dsfinal.txt");
       
end for;  

// store used parameters in a .txt file
Modelica.Utilities.Files.remove("results/"+parameters+".txt");
Modelica.Utilities.Streams.print("N " + String(N), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("ll " + String(ll), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("h " + String(h), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("M " + String(M), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("K " + String(K), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_u " + String(sigma_u), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_y " + String(sigma_y), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_load " + String(sigma_load), "results/"+parameters+".txt");

// copy initial .mo to directory
Modelica.Utilities.Files.copy("Multisine_Noise_SimuInit.mo", "../ExcitationGeneration/Multisine_Noise_Simu.mo", replace = true);

// copy results to server
Modelica.Utilities.Files.copy("results/", SimulationResults, replace = true);

// clear up
Modelica.Utilities.Files.remove("Modelica.Utilities.Streams.readRealMatrix.exe");
Modelica.Utilities.Files.remove("Modelica.Utilities.Streams.readMatrixSize.exe");
Modelica.Utilities.Files.remove("dymosim.exe");
Modelica.Utilities.Files.remove("NetworkSimu.mat");
Modelica.Utilities.Files.remove("NetworkSysId.mat");