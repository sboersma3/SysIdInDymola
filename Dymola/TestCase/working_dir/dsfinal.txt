#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
  4.0000000000000001E-02   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
  3.0039999999999999E+01   # StopTime     Time at which integration stops
  1.0000000000000000E-02   # Increment    Communication step size, if > 0
       0                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       0                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  2.0000000000000000E-14   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
  9.9999999999999995E-07   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 0                         # lx       0/1 do not/store x  (state variables)
 0                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 0                         # lw       0/1 do not/store w  (auxiliary signals)
 0                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(87,33)
globalSeed.enableNoise
globalSeed.useAutomaticSeed
globalSeed.fixedSeed
globalSeed.seed
globalSeed.id_impure
normalNoise.y
normalNoise.samplePeriod
normalNoise.enableNoise
normalNoise.y_off
normalNoise.useGlobalSeed
normalNoise.useAutomaticLocalSeed
normalNoise.fixedLocalSeed
normalNoise.startTime
normalNoise.localSeed
normalNoise.actualGlobalSeed
normalNoise.generateNoise
normalNoise.state[1]
normalNoise.state[2]
normalNoise.state[3]
normalNoise.state[4]
normalNoise.r
normalNoise.r_raw
normalNoise.mu
normalNoise.sigma
feedback1.u1
feedback1.u2
stateSpace.A[1, 1]
stateSpace.A[1, 2]
stateSpace.A[2, 1]
stateSpace.A[2, 2]
stateSpace.B[1, 1]
stateSpace.B[2, 1]
stateSpace.C[1, 1]
stateSpace.C[1, 2]
stateSpace.D[1, 1]
stateSpace.initType
stateSpace.x_start[1]
stateSpace.x_start[2]
stateSpace.y_start[1]
stateSpace.nin
stateSpace.nout
stateSpace.u[1]
stateSpace.x[1]
stateSpace.der(x[1])
stateSpace.x[2]
stateSpace.der(x[2])
stateSpace.nx
stateSpace.ny
pulse.amplitude
pulse.width
pulse.period
pulse.nperiod
pulse.offset
pulse.startTime
pulse.T_width
pulse.T_start
pulse.count
gain.k
y1
y2
generateMultiSine_P.h
generateMultiSine_P.M
generateMultiSine_P.N
generateMultiSine_P.A[1, 1]
generateMultiSine_P.A[1, 2]
generateMultiSine_P.A[2, 1]
generateMultiSine_P.A[2, 2]
generateMultiSine_P.A[3, 1]
generateMultiSine_P.A[3, 2]
generateMultiSine_P.A[4, 1]
generateMultiSine_P.A[4, 2]
generateMultiSine_P.B[1, 1]
generateMultiSine_P.B[1, 2]
generateMultiSine_P.B[1, 3]
generateMultiSine_P.B[1, 4]
generateMultiSine_P.B[2, 1]
generateMultiSine_P.B[2, 2]
generateMultiSine_P.B[2, 3]
generateMultiSine_P.B[2, 4]
generateMultiSine_P.C[1, 1]
generateMultiSine_P.C[1, 2]
generateMultiSine_P.Vecy[1, 1]
generateMultiSine_P.Vecy[2, 1]
generateMultiSine_P.y
add.k1
add.k2
y3

double initialValue(87,6)
 -1       1                       0                       0                
  1   281   # globalSeed.enableNoise
 -1       0                       0                       0                
  1   281   # globalSeed.useAutomaticSeed
 -1  6.7867967000000000E+07       0                       0                
  1   282   # globalSeed.fixedSeed
 -2  6.7867967000000000E+07       0                       0                
  6   258   # globalSeed.seed
 -2  7.1582788300000000E+08       0                       0                
  6   770   # globalSeed.id_impure
 -2  1.4141520646714993E-02       0                       0                
  6   320   # normalNoise.y
 -1  1.0000000000000000E-02       0                       0                
  1   280   # normalNoise.samplePeriod
 -2       1                       0                       0                
  6   257   # normalNoise.enableNoise
 -1       0                       0                       0                
  1   280   # normalNoise.y_off
 -1       1                       0                       0                
  1   281   # normalNoise.useGlobalSeed
 -1       1                       0                       0                
  1   281   # normalNoise.useAutomaticLocalSeed
 -1       1                       0                       0                
  1   282   # normalNoise.fixedLocalSeed
 -1       0                       0                       0                
  1   280   # normalNoise.startTime
 -2  5.0091890000000000E+06       0                       0                
  6   258   # normalNoise.localSeed
 -2  6.7867967000000000E+07       0                       0                
  6  1282   # normalNoise.actualGlobalSeed
 -2       1                       0                       0                
  6  1281   # normalNoise.generateNoise
 -2 -1.7873043310000000E+09       0                       0                
  6  1346   # normalNoise.state[1]
 -2  8.3924219100000000E+08       0                       0                
  6  1346   # normalNoise.state[2]
 -2 -1.2377524600000000E+09       0                       0                
  6  1346   # normalNoise.state[3]
 -2  2.4150184000000000E+08       0                       0                
  6  1346   # normalNoise.state[4]
 -2  1.4141520646714993E-02       0                       0                
  6  1344   # normalNoise.r
 -2  5.5622902901652582E-01       0                       0                
  6  1344   # normalNoise.r_raw
 -1       0                       0                       0                
  1   280   # normalNoise.mu
 -1  1.0000000000000001E-01       0                       0                
  1   280   # normalNoise.sigma
 -2  5.0651473656152668E-01       0                       0                
  6   256   # feedback1.u1
 -2  6.5093032404809362E-02       0                       0                
  6   256   # feedback1.u2
 -1      -1                       0                       0                
  1   280   # stateSpace.A[1, 1]
 -1     -25                       0                       0                
  1   280   # stateSpace.A[1, 2]
 -1       1                       0                       0                
  1   280   # stateSpace.A[2, 1]
 -1       0                       0                       0                
  1   280   # stateSpace.A[2, 2]
 -1      25                       0                       0                
  1   280   # stateSpace.B[1, 1]
 -1       0                       0                       0                
  1   280   # stateSpace.B[2, 1]
 -1       0                       0                       0                
  1   280   # stateSpace.C[1, 1]
 -1       1                       0                       0                
  1   280   # stateSpace.C[1, 2]
 -1       0                       0                       0                
  1   280   # stateSpace.D[1, 1]
 -2       4                       1                       4                
  6   258   # stateSpace.initType
 -1       0                       0                       0                
  1   280   # stateSpace.x_start[1]
 -1       0                       0                       0                
  1   280   # stateSpace.x_start[2]
 -1       0                       0                       0                
  1   280   # stateSpace.y_start[1]
 -2       1                       0                       0                
  6   258   # stateSpace.nin
 -2       1                       0                       0                
  6   258   # stateSpace.nout
 -2       1                       0                       0                
  6   320   # stateSpace.u[1]
 -2       0                       0                       0                
  2   272   # stateSpace.x[1]
 -2       0                       0                       0                
  3   256   # stateSpace.der(x[1])
 -2       0                       0                       0                
  2   272   # stateSpace.x[2]
 -2       0                       0                       0                
  3   256   # stateSpace.der(x[2])
 -2       2                       0                       0                
  6  1282   # stateSpace.nx
 -2       1                       0                       0                
  6  1282   # stateSpace.ny
 -1       1                       0                       0                
  1   280   # pulse.amplitude
 -1      50                  9.9999999999999997E-61     100                
  1   280   # pulse.width
 -1      10                  9.9999999999999997E-61 1.0000000000000000E+100
  1   280   # pulse.period
 -1      -1                       0                       0                
  1   282   # pulse.nperiod
 -1       0                       0                       0                
  1   280   # pulse.offset
 -1       0                       0                       0                
  1   280   # pulse.startTime
 -2       5                       0                       0                
  6  1280   # pulse.T_width
 -2       0                       0                       0                
  6  1344   # pulse.T_start
 -2       0                       0                       0                
  6  1346   # pulse.count
 -1       1                       0                       0                
  1   280   # gain.k
 -2  5.0651473656152668E-01       0                       0                
  4   256   # y1
 -2  4.4142170415671733E-01       0                       0                
  4   256   # y2
 -2  1.0000000000000000E-02       0                       0                
  6   256   # generateMultiSine_P.h
 -2       2                       0                       0                
  6   258   # generateMultiSine_P.M
 -2       4                       0                       0                
  6   258   # generateMultiSine_P.N
 -1       1                       0                       0                
  1   280   # generateMultiSine_P.A[1, 1]
 -1       1                       0                       0                
  1   280   # generateMultiSine_P.A[1, 2]
 -1       1                       0                       0                
  1   280   # generateMultiSine_P.A[2, 1]
 -1       1                       0                       0                
  1   280   # generateMultiSine_P.A[2, 2]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.A[3, 1]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.A[3, 2]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # generateMultiSine_P.A[4, 1]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # generateMultiSine_P.A[4, 2]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.B[1, 1]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.B[1, 2]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.B[1, 3]
 -1  5.0000000000000000E-01       0                       0                
  1   280   # generateMultiSine_P.B[1, 4]
 -1       3                       0                       0                
  1   280   # generateMultiSine_P.B[2, 1]
 -1       3                       0                       0                
  1   280   # generateMultiSine_P.B[2, 2]
 -1       3                       0                       0                
  1   280   # generateMultiSine_P.B[2, 3]
 -1       3                       0                       0                
  1   280   # generateMultiSine_P.B[2, 4]
 -1       0                       0                       0                
  1   280   # generateMultiSine_P.C[1, 1]
 -1       0                       0                       0                
  1   280   # generateMultiSine_P.C[1, 2]
 -2  1.9998666693333083E-03       0                       0                
  6   256   # generateMultiSine_P.Vecy[1, 1]
 -2  1.1971220728891938E-02       0                       0                
  6   256   # generateMultiSine_P.Vecy[2, 1]
 -2  1.3971087398225246E-02       0                       0                
  6   256   # generateMultiSine_P.y
 -1       1                       0                       0                
  1   280   # add.k1
 -1       1                       0                       0                
  1   280   # add.k2
 -2       4                       0                       0                
  4   320   # y3


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(87,127)
= true, if noise blocks generate noise as output; = false, if they generate a constant output [:#(type=Boolean)]
= true, choose a seed by system time and process id; = false, use fixedSeed [:#(type=Boolean)]
Fixed global seed for random number generators (if useAutomaticSeed = false) [:#(type=Integer)]
Actually used global seed [:#(type=Integer)]
ID for impure random number generators Modelica.Math.Random.Utilities.impureXXX [:#(type=Integer)]
Connector of Real output signal
Period for sampling the raw random numbers [s]
=true: y = noise, otherwise y = y_off [:#(type=Boolean)]
y = y_off if enableNoise=false (or time<startTime, see below)
= true: use global seed, otherwise ignore it [:#(type=Boolean)]
= true: use automatic local seed, otherwise use fixedLocalSeed [:#(type=Boolean)]
Local seed (any Integer number) [:#(type=Integer)]
Start time for sampling the raw random numbers [s]
The actual localSeed [:#(type=Integer)]
The global seed, which is actually used [:#(type=Integer)]
= true if noise shall be generated, otherwise no noise [:#(type=Boolean)]
Internal state of random number generator [:#(type=Integer)]
Internal state of random number generator [:#(type=Integer)]
Internal state of random number generator [:#(type=Integer)]
Internal state of random number generator [:#(type=Integer)]
Random number according to the desired distribution
Uniform random number in the range (0,1] []
Expectation (mean) value of the normal distribution
Standard deviation of the normal distribution


Matrix A of state space model (e.g., A=[1, 0; 0, 1])
Matrix A of state space model (e.g., A=[1, 0; 0, 1])
Matrix A of state space model (e.g., A=[1, 0; 0, 1])
Matrix A of state space model (e.g., A=[1, 0; 0, 1])
Matrix B of state space model (e.g., B=[1; 1])
Matrix B of state space model (e.g., B=[1; 1])
Matrix C of state space model (e.g., C=[1, 1])
Matrix C of state space model (e.g., C=[1, 1])
Matrix D of state space model
Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess values of states
Initial or guess values of states
Initial values of outputs (remaining states are in steady state if possible)
Number of inputs [:#(type=Integer)]
Number of outputs [:#(type=Integer)]
Connector of Real input signals
State vector
der(State vector)
State vector
der(State vector)
number of states [:#(type=Integer)]
number of outputs [:#(type=Integer)]
Amplitude of pulse
Width of pulse in % of period
Time for one period [s]
Number of periods (< 0 means infinite number of periods) [:#(type=Integer)]
Offset of output signal y
Output y = offset for time < startTime [s]
[s]
Start time of current period [s]
Period count [:#(type=Integer)]
Gain value multiplied with input signal [1]



[:#(type=Integer)]
[:#(type=Integer)]
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix A with excitation amplitudes (e.g., A=[A1, A2; 0, 0])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Matrix B with excitation frequencies (e.g., B=[w1; w2])
Just a matrix because it can not be removed...
Just a matrix because it can not be removed...



Gain of input signal 1
Gain of input signal 2
[1]

