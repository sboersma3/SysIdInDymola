Model       = "HVDCNordic44";

working_dir = "C:/Users/s.boersma/Documents/MATLAB/SysIdinDymola/Dymola/"+Model+"/working_dir";
cd(working_dir)

Modelica.Utilities.Files.remove("results")
Modelica.Utilities.Files.createDirectory("results");

SimulationResults   = "C:/Users/s.boersma/Documents/MATLAB/SysIdinDymola/results/"+Model+"/";
ModelToSimulate     = Model+".NetworkSimu";
ModelToLinearize    = Model+".NetworkSysId";

dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "A"); 
A                   = Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "A", dim[1], dim[2]); 
dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "B"); 
B                   = Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "B", dim[1], dim[2]); 
dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "C"); 
C                   = Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "C", dim[1], dim[2]);

M                   = size(B,1);
L                   = size(B,2);

dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "ll"); 
ll                  = scalar(Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "ll", dim[1], dim[2])); 
dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "h"); 
h                   = scalar(Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "h", dim[1], dim[2])); 
dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "N"); 
N                   = scalar(Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "N", dim[1], dim[2])); 
dim                 = Modelica.Utilities.Streams.readMatrixSize(SimulationResults+"InputDymola.mat", "K"); 
K                   = scalar(Modelica.Utilities.Streams.readRealMatrix(SimulationResults+"InputDymola.mat", "K", dim[1], dim[2])); 

d1                  = 8;                // batch number where the disturbance is activated
d2                  = 9;                // batch number after which the disturbance is deactivated

sigma_u             = 0;          // standard deviation noise input  
sigma_y             = 0;          // standard deviation noise output  
sigma_load          = 0.05;           // standard deviation noise load
  

LinRes              = "LinRes";
SimRes              = "SimRes";
parameters          = "parameters";


// set #excitation frequencies in .mo file
Modelica.Utilities.Files.copy("Multisine_Noise_SimuInit.mo", "../ExcitationGeneration/Multisine_Noise_Simu.mo", replace = true);  
Modelica.Utilities.Files.remove("Mvalue.txt");
Modelica.Utilities.Streams.print(String(M),"Mvalue.txt");
Modelica.Utilities.Files.remove("Lvalue.txt");
Modelica.Utilities.Streams.print(String(L),"Lvalue.txt");
Modelica.Utilities.Files.remove("hvalue.txt");
Modelica.Utilities.Streams.print(String(h),"hvalue.txt");
Modelica.Utilities.Files.remove("llvalue.txt");
Modelica.Utilities.Streams.print(String(ll),"llvalue.txt");
Execute("..\SetValues.bat")
openModel("..\ExcitationGeneration\Multisine_Noise_Simu.mo");
openModel("..\..\bin\OpenIPSL\package.mo",mustRead=false);
openModel("..\LPV\package.mo",mustRead=false);
cd(working_dir)

// set settings for linearization
Advanced.Define.DAEsolver = false;  
translateModel(ModelToLinearize)

// loop for linearization
for kk in 1:N loop
  
  
  
  
  LPV.linearize(ModelToLinearize, ModelToSimulate, timeStep=ll*kk, samplePeriod=h, Nlin=ll, counter=kk, fileNameLin="results/"+LinRes, fileNameSim="results"+SimRes  );  
     
end for;  

// set settings for time domain simulation
experimentSetupOutput(states=false,derivatives=false,auxiliaries=false,events=false);
Advanced.Define.DAEsolver = true;
translateModel(ModelToSimulate);

// set excitation parameters in the model
multisine_Noise_Simu.normalNoise_P.samplePeriod = h;             
multisine_Noise_Simu.normalNoise_P.sigma        = sigma_u;           
multisine_Noise_Simu.normalNoise_Q.samplePeriod = h;             
multisine_Noise_Simu.normalNoise_Q.sigma        = sigma_u; 

multisine_Noise_Simu.generateMultiSine_Q.A      = A;
multisine_Noise_Simu.generateMultiSine_Q.B      = B;
multisine_Noise_Simu.generateMultiSine_Q.C      = C;

normalNoise_y.samplePeriod                      = h;
normalNoise_y.sigma                             = sigma_y; 

multisine_Noise_Simu_load.normalNoise_P.samplePeriod = h;
multisine_Noise_Simu_load.normalNoise_P.sigma        = sigma_load;
multisine_Noise_Simu_load.normalNoise_Q.samplePeriod = h;
multisine_Noise_Simu_load.normalNoise_Q.sigma        = sigma_load;

// loop for time domain simulation
for kk in 1:N loop
  
  
  
  
  LPV.simulateExtendedModel(ModelToSimulate, startTime=ll*(kk-1), stopTime=ll*kk, outputInterval=h, method="dassl", resultFile="results/"+SimRes+String(ll*kk) ); 
  importInitial("dsfinal.txt");
       
end for;  

// store used parameters in a .txt file
Modelica.Utilities.Files.remove("results/"+parameters+".txt");
Modelica.Utilities.Streams.print("N " + String(N), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("ll " + String(ll), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("h " + String(h), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("M " + String(M), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("K " + String(K), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_u " + String(sigma_u), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_y " + String(sigma_y), "results/"+parameters+".txt");
Modelica.Utilities.Streams.print("sigma_load " + String(sigma_load), "results/"+parameters+".txt");

// copy initial .mo to directory
Modelica.Utilities.Files.copy("Multisine_Noise_SimuInit.mo", "../ExcitationGeneration/Multisine_Noise_Simu.mo", replace = true);

// copy results to server
Modelica.Utilities.Files.copy("results/", SimulationResults, replace = true);

// clear up
Modelica.Utilities.Files.remove("Modelica.Utilities.Streams.readRealMatrix.exe");
Modelica.Utilities.Files.remove("Modelica.Utilities.Streams.readMatrixSize.exe");
Modelica.Utilities.Files.remove("dymosim.exe");
Modelica.Utilities.Files.remove("NetworkSimu.mat");
Modelica.Utilities.Files.remove("NetworkSysId.mat");